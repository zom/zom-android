plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
}


android {
    compileSdkVersion 32
    buildToolsVersion "32.0.0"

    defaultConfig {
        applicationId "im.zom.messenger"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 307002200
        versionName "3.0.7-RC-2"
        archivesBaseName = "Zom-$versionName"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    flavorDimensions "mode" 

    productFlavors {

        primary {// Assigns this product flavor to the "mode" flavor dimension.
            dimension "mode"
            applicationId "im.zom.messenger"
                                                                                                                                                                                                                                                                                                                                            }

        nightly {
            dimension = "mode"
            applicationId "im.zom.keanu3"
        }



    }


    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'LocaleFolder'

    }

    kotlinOptions {
        jvmTarget = '1.11'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/proguard'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/androidx.exifinterface_exifinterface.version'
        exclude 'lib/arm64-v8a/libjingle_peerconnection_so.so'
        exclude 'lib/armeabi-v7a/libjingle_peerconnection_so.so'
        exclude 'lib/x86/libjingle_peerconnection_so.so'
        exclude 'lib/x86_64/libjingle_peerconnection_so.so'

    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }


    }


}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //    // lock
    implementation 'com.github.thealeksandr:PFLockScreen-Android:1.0.0-beta7'

    implementation 'info.guardianproject.keanuapp:keanulib:0.0.5.78'

}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': '1', 'arm64-v8a': '2', 'mips': '3', 'x86': '4', 'x86_64': '5']

// For each APK output variant, override version code of outputs based on ABI codes
// ex) 'mips' -> 3xxx
// ex) 'x86' -> 4xxx
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseVersionCode = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
        if (baseVersionCode != null) {
            output.versionCodeOverride = Integer.valueOf(variant.versionCode) + Integer.valueOf(baseVersionCode)
        }
    }
}

